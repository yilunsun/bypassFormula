library(bypassFormula)
library(bypassFormula)
set.seed(123456)
n <- 1000
X <- mvrnorm(n, mu = rep(0,2), Sigma = diag(2))
beta <- rnorm(ncol(X)+1, sd = 1)
treat <- cbind(1,X)%*%beta + rnorm(n, sd = 5)
treat.effect <- 1
effect.beta <- rnorm(ncol(X))
y <- rbinom(n, 1, (1 + exp(-treat.effect*treat -
X%*%effect.beta))^-1)
library(mvrnorm)
library(MASS)
set.seed(123456)
n <- 1000
X <- mvrnorm(n, mu = rep(0,2), Sigma = diag(2))
beta <- rnorm(ncol(X)+1, sd = 1)
treat <- cbind(1,X)%*%beta + rnorm(n, sd = 5)
treat.effect <- 1
effect.beta <- rnorm(ncol(X))
y <- rbinom(n, 1, (1 + exp(-treat.effect*treat -
X%*%effect.beta))^-1)
fit2 <- npCBPS(treat~X)
library(CBPS)
fit2 <- npCBPS(treat~X)
fit1 <- npCBPS_neo(X, treat)
fit1 <- npCBPS_neo(treat, X)
head(fit2["weights"])
head(1/fit2["weights"])
head(fit2["weights"]^(-1))
dd=fit2["weights"]
str(dd)
dd=1/unlist(fit2["weights"])
head(dd)
sum(unlist(fit2["weights"]))
library(bypassFormula)
fit1 <- npCBPS_neo(treat, X)
fit2 <- npCBPS(treat~X)
fit1
head(fit1)
devtools::load_all(".")
fit1 <- npCBPS_neo(treat, X)
library(bypassFormula)
fit1 <- npCBPS_neo(treat, X)
fit2 <- npCBPS(treat~X)
head(fit1)
head(fit2)
head(fit2$weights)
head(fit2$weights*1000)
head(1/(fit2$weights*1000))
head(fit1)
library(bypassFormula)
?rep
ps=1:10
a_out=1:10/10
a_out
data.frame(ps=ps,a=rep(a_out,each=length(ps)))
ps=npCBPS_neo(y,x)
library(MASS)
library(CBPS)
set.seed(123456)
n <- 1000
X <- mvrnorm(n, mu = rep(0,2), Sigma = diag(2))
beta <- rnorm(ncol(X)+1, sd = 1)
treat <- cbind(1,X)%*%beta + rnorm(n, sd = 5)
treat.effect <- 1
effect.beta <- rnorm(ncol(X))
y <- rbinom(n, 1, (1 + exp(-treat.effect*treat -
X%*%effect.beta))^-1)
fit1 <- npCBPS_neo(treat, X)
npCBPS_neo <- function(y,x) {
library(CBPS)
#print("X:", dim(X))
return(1/(length(y)*unlist(npCBPS(y~x)['weights'])))
}
fit1 <- npCBPS_neo(treat, X)
head(fit1)
ps=fit1
a=
a=treatment
a=treat
summary(a)
library(mgcv)
fit <- gam(y~s(ps)+s(ps,by=a))
a_out=seq(-10,10,length.out = 20)
a_out
pred <- predict(fit, data.frame(ps=ps,a=rep(a_out,each=length(ps))))
dd=data.frame(ps=ps,a=rep(a_out,each=length(ps)))
View(dd)
dim(dd)
head(pred)
dd=matrix(pred, nrow = length(ps))
head(dd)
dim(dd)
dd=apply(matrix(pred, nrow = length(ps)),1,which.max)
table(dd)
dd=matrix(pred, nrow = length(ps)
dd=matrix(pred, nrow = length(ps))
dim(dd)
value <- apply(matrix(pred, nrow = length(ps)), 1, mean)
value <- apply(matrix(pred, nrow = length(ps)), 2, mean)
dim(optlabel)
optlabel <- apply(matrix(pred, nrow = length(ps)), 1, which.max)
dim(optlabel)
length(optlabel)
optlabel <- apply(matrix(pred, nrow = length(ps)), 2, which.max)
optlabel
value
library(bypassFormula)
library(bypassFormula)
library(bypassFormula)
library(bypassFormula)
library(MASS)
library(CBPS)
set.seed(123456)
n <- 1000
X <- mvrnorm(n, mu = rep(0,2), Sigma = diag(2))
beta <- rnorm(ncol(X)+1, sd = 1)
treat <- cbind(1,X)%*%beta + rnorm(n, sd = 5)
treat.effect <- 1
effect.beta <- rnorm(ncol(X))
y <- rbinom(n, 1, (1 + exp(-treat.effect*treat -
X%*%effect.beta))^-1)
fit1 <- npCBPS_neo(treat, X)
npCBPS_neo <- function(y,x) {
library(CBPS)
invisible(capture.output(fit=npCBPS(y~x)))
return(1/(length(y)*unlist(fit['weights'])))
}
fit1 <- npCBPS_neo(treat, X)
npCBPS_neo <- function(y,x) {
library(CBPS)
fit=npCBPS(y~x)
return(1/(length(y)*unlist(fit['weights'])))
}
fit1 <- npCBPS_neo(treat, X)
y=treat
x=X
library(CBPS)
invisible(capture.output(fit <- npCBPS(y~x)))
1/(length(y)*unlist(fit['weights']))
npCBPS_neo <- function(y,x) {
library(CBPS)
invisible(capture.output(fit <- npCBPS(y~x)))
return(1/(length(y)*unlist(fit['weights'])))
}
fit1 <- npCBPS_neo(treat, X)
library(bypassFormula)
GPS_neo <- function(y,x) {
library(mgcv)
invisible(capture.output(fit <- CBPS(y~x)))
return(1/(length(y)*unlist(fit['weights'])))
}
library(MASS)
library(CBPS)
set.seed(123456)
n <- 1000
X <- mvrnorm(n, mu = rep(0,2), Sigma = diag(2))
beta <- rnorm(ncol(X)+1, sd = 1)
treat <- cbind(1,X)%*%beta + rnorm(n, sd = 5)
treat.effect <- 1
effect.beta <- rnorm(ncol(X))
y <- rbinom(n, 1, (1 + exp(-treat.effect*treat -
X%*%effect.beta))^-1)
fit0 <- npCBPS_neo(treat, X)
fit1 <- GPS_neo(treat, X)
npCBPS_neo <- function(y,x) {
library(CBPS)
invisible(capture.output(fit <- npCBPS(y~x)))
return(1/(length(y)*unlist(fit['weights'])))
}
GPS_neo <- function(y,x) {
library(CBPS)
invisible(capture.output(fit <- CBPS(y~x)))
return(1/(length(y)*unlist(fit['weights'])))
}
fit0 <- npCBPS_neo(treat, X)
fit1 <- GPS_neo(treat, X)
plot(fit0,fit1)
?CBPS
str(fit1)
str(fit0)
library(bypassFormula)
library(bypassFormula)
